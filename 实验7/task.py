from libnum import s2n
from gmpy2 import next_prime
from random import randint
from secret import flag

def chaos_maker(p, g, seed):
    res = 0
    x = seed
    for _ in range(randint(0, 114514)):
        x = pow(g, x, p)
    for i in range(256):
        x = pow(g, x, p)
        if x < (p-1) // 2:
            res -= (1 << i) - 1
        elif x > (p-1) // 2:
            res += (1 << i) + 1
        else:
            res ^= (1 << i + 1)
    return res if res > 0 else -res

def keygen(p, g):
    u, v = chaos_maker(p, g, randint(0, 1<<64)), chaos_maker(p, g, randint(0, 1<<64))
    return next_prime(u**2 + v**2) * next_prime(2*u*v)

p = 74318463376311964657848870236469351222861371046000989980725143814597652972079
g = 10135979321704650132001133858909900216529170765388975908180263641843583056994
N = keygen(p, g)
print(N)
# N = 46560744052031492000075598084262814175984839629218579003339825251165084535288738001196294968344403225296587992393409186512832442084313772062189640462381680977493272839744503195012137744652370256066011590369737294828406013950810998314546935103160880000499234316605414326064476117367727072344004644766745175963
e = 65537
c = pow(s2n(flag), e, N)
print(c)
# c = 23334367507777982721463578689282517343702422017568936413397591619899938216343800551132594869485665306596562901129144338015710969994575939792628945297846703002122172051500112438041566171992504143239954624689779597268840813422509867439815100802585538453946245512563984478922752113443379737653491922857109660034
