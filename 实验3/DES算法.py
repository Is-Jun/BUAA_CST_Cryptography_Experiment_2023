import time


def IP_trans(text, mode):  # text 64bit字符串 1为正变换
    IP_substitution = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
                       62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
                       57, 49, 41, 33, 25, 17, 9,  1, 59, 51, 43, 35, 27, 19, 11, 3,
                       61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7]
    IP_inv_sub = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
                  38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
                  36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
                  34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41,  9, 49, 17, 57, 25]
    result = ''
    if mode == 1:
        for i in IP_substitution:
            result += text[i - 1]
    else:
        for i in IP_inv_sub:
            result += text[i - 1]
    return result


def E(R, K):  # R 32bit字符串, K 48bit字符串
    result = ''
    for i in range(32):
        if i % 4 == 0:
            result += (R[i - 1] + R[i])
        elif i % 4 == 3:
            result += (R[i] + R[(i + 1) % 32])
        else:
            result += R[i]
    # print(hex(int(result, base=2)))
    result = bin(int(result, base=2) ^ int(K, base=2))[2:].zfill(48)
    # print(hex(int(result,base=2)))
    return result  # 48bit


def S_box(R):  # R 48bit字符串
    Sbox0 = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
             [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
             [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
             [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]]
    Sbox1 = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
             [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
             [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
             [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]]
    Sbox2 = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
             [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
             [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
             [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]]
    Sbox3 = [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
             [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
             [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
             [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]]
    Sbox4 = [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
             [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
             [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
             [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]]
    Sbox5 = [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
             [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
             [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
             [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]]
    Sbox6 = [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
             [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
             [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
             [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]]
    Sbox7 = [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
             [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
             [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
             [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]
    Sbox = [Sbox0, Sbox1, Sbox2, Sbox3, Sbox4, Sbox5, Sbox6, Sbox7]

    result = ''
    for i in range(8):
        _ = R[i * 6:(i + 1) * 6]
        select = int(_[0] + _[-1], base=2)
        data = int(_[1:5], base=2)
        result += bin(Sbox[i][select][data])[2:].zfill(4)
    # print(hex(int(result, base=2)))
    return result  # 32bit


def P_box(R):  # 32bit字符串
    P_form = [16,  7, 20, 21, 29, 12, 28, 17,  1, 15, 23, 26,  5, 18, 31, 10,
               2,  8, 24, 14, 32, 27,  3,  9, 19, 13, 30,  6, 22, 11,  4, 25]
    result = ''
    for i in P_form:
        result += R[i - 1]
    # print(hex(int(result, base=2)))
    return result


def one_round(L, R, K):  # L 32bit字符串, R 32bit字符串, K 48bit字符串
    L, R = R, bin(int(P_box(S_box(E(R, K))), base=2) ^ int(L, base=2))[2:].zfill(32)
    return L, R


def generate_key(k):  # 产生16轮所需的所有秘钥  k 64bit字符串
    key_sub1 = [57, 49, 41, 33, 25, 17,  9,  1, 58, 50, 42, 34, 26, 18,
                10,  2, 59, 51, 43, 35, 27, 19, 11,  3, 60, 52, 44, 36,
                63, 55, 47, 39, 31, 23, 15,  7, 62, 54, 46, 38, 30, 22,
                14,  6, 61, 53, 45, 37, 29, 21, 13,  5, 28, 20, 12,  4]
    key_sub2 = [14, 17, 11, 24,  1,  5,  3, 28, 15,  6, 21, 10,
                23, 19, 12,  4, 26,  8, 16,  7, 27, 20, 13,  2,
                41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
                44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]
    key_shift = [0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

    K = ''
    for i in key_sub1:
        K += k[i - 1]

    key = ['']
    for i in range(1, 17):
        C, D = K[:28], K[28:]
        C = C[key_shift[i]:] + C[:key_shift[i]]
        D = D[key_shift[i]:] + D[:key_shift[i]]
        K = C + D
        list_ = ''
        for j in key_sub2:
            list_ += K[j - 1]
        key.append(list_)
    key.append('')  # 方便解密使用
    return key


def DES(s, k, mode):  # s, k都为64 bit字符串
    text = IP_trans(s, 1)
    key = generate_key(k)
    if mode == 0:
        key = key[::-1]
    for round_i in range(1, 17):
        # print(round_i)
        # print(hex(int(text,base=2)))
        L, R = text[0:32], text[32:]
        L, R = one_round(L, R, key[round_i])
        text = L + R
    text = text[32:] + text[:32]
    text = IP_trans(text, 0)
    return text


def main():
    T = int(input())
    s = bin(int(input().strip(), base=16))[2:].zfill(64)
    k = bin(int(input().strip(), base=16))[2:].zfill(64)
    time_start = time.time()
    mode = int(input())
    for i in range(T):
        s = DES(s, k, mode)
    print('0x' + hex(int(s, base=2))[2:].zfill(16))
    time_end = time.time()
    print(f'运行时间：{time_end - time_start}')


if __name__ == '__main__':
    main()
# 10000
# 0x900eb9584f9321c0
# 0x84f5ca4805eb1ba3
# 1
