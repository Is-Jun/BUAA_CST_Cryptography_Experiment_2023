s = [0] * 16
X = [0] * 4
R = [0] * 2
S0 = [0x3e, 0x72, 0x5b, 0x47, 0xca, 0xe0, 0x00, 0x33, 0x04, 0xd1, 0x54, 0x98, 0x09, 0xb9, 0x6d, 0xcb,
      0x7b, 0x1b, 0xf9, 0x32, 0xaf, 0x9d, 0x6a, 0xa5, 0xb8, 0x2d, 0xfc, 0x1d, 0x08, 0x53, 0x03, 0x90,
      0x4d, 0x4e, 0x84, 0x99, 0xe4, 0xce, 0xd9, 0x91, 0xdd, 0xb6, 0x85, 0x48, 0x8b, 0x29, 0x6e, 0xac,
      0xcd, 0xc1, 0xf8, 0x1e, 0x73, 0x43, 0x69, 0xc6, 0xb5, 0xbd, 0xfd, 0x39, 0x63, 0x20, 0xd4, 0x38,
      0x76, 0x7d, 0xb2, 0xa7, 0xcf, 0xed, 0x57, 0xc5, 0xf3, 0x2c, 0xbb, 0x14, 0x21, 0x06, 0x55, 0x9b,
      0xe3, 0xef, 0x5e, 0x31, 0x4f, 0x7f, 0x5a, 0xa4, 0x0d, 0x82, 0x51, 0x49, 0x5f, 0xba, 0x58, 0x1c,
      0x4a, 0x16, 0xd5, 0x17, 0xa8, 0x92, 0x24, 0x1f, 0x8c, 0xff, 0xd8, 0xae, 0x2e, 0x01, 0xd3, 0xad,
      0x3b, 0x4b, 0xda, 0x46, 0xeb, 0xc9, 0xde, 0x9a, 0x8f, 0x87, 0xd7, 0x3a, 0x80, 0x6f, 0x2f, 0xc8,
      0xb1, 0xb4, 0x37, 0xf7, 0x0a, 0x22, 0x13, 0x28, 0x7c, 0xcc, 0x3c, 0x89, 0xc7, 0xc3, 0x96, 0x56,
      0x07, 0xbf, 0x7e, 0xf0, 0x0b, 0x2b, 0x97, 0x52, 0x35, 0x41, 0x79, 0x61, 0xa6, 0x4c, 0x10, 0xfe,
      0xbc, 0x26, 0x95, 0x88, 0x8a, 0xb0, 0xa3, 0xfb, 0xc0, 0x18, 0x94, 0xf2, 0xe1, 0xe5, 0xe9, 0x5d,
      0xd0, 0xdc, 0x11, 0x66, 0x64, 0x5c, 0xec, 0x59, 0x42, 0x75, 0x12, 0xf5, 0x74, 0x9c, 0xaa, 0x23,
      0x0e, 0x86, 0xab, 0xbe, 0x2a, 0x02, 0xe7, 0x67, 0xe6, 0x44, 0xa2, 0x6c, 0xc2, 0x93, 0x9f, 0xf1,
      0xf6, 0xfa, 0x36, 0xd2, 0x50, 0x68, 0x9e, 0x62, 0x71, 0x15, 0x3d, 0xd6, 0x40, 0xc4, 0xe2, 0x0f,
      0x8e, 0x83, 0x77, 0x6b, 0x25, 0x05, 0x3f, 0x0c, 0x30, 0xea, 0x70, 0xb7, 0xa1, 0xe8, 0xa9, 0x65,
      0x8d, 0x27, 0x1a, 0xdb, 0x81, 0xb3, 0xa0, 0xf4, 0x45, 0x7a, 0x19, 0xdf, 0xee, 0x78, 0x34, 0x60]
S1 = [0x55, 0xc2, 0x63, 0x71, 0x3b, 0xc8, 0x47, 0x86, 0x9f, 0x3c, 0xda, 0x5b, 0x29, 0xaa, 0xfd, 0x77,
      0x8c, 0xc5, 0x94, 0x0c, 0xa6, 0x1a, 0x13, 0x00, 0xe3, 0xa8, 0x16, 0x72, 0x40, 0xf9, 0xf8, 0x42,
      0x44, 0x26, 0x68, 0x96, 0x81, 0xd9, 0x45, 0x3e, 0x10, 0x76, 0xc6, 0xa7, 0x8b, 0x39, 0x43, 0xe1,
      0x3a, 0xb5, 0x56, 0x2a, 0xc0, 0x6d, 0xb3, 0x05, 0x22, 0x66, 0xbf, 0xdc, 0x0b, 0xfa, 0x62, 0x48,
      0xdd, 0x20, 0x11, 0x06, 0x36, 0xc9, 0xc1, 0xcf, 0xf6, 0x27, 0x52, 0xbb, 0x69, 0xf5, 0xd4, 0x87,
      0x7f, 0x84, 0x4c, 0xd2, 0x9c, 0x57, 0xa4, 0xbc, 0x4f, 0x9a, 0xdf, 0xfe, 0xd6, 0x8d, 0x7a, 0xeb,
      0x2b, 0x53, 0xd8, 0x5c, 0xa1, 0x14, 0x17, 0xfb, 0x23, 0xd5, 0x7d, 0x30, 0x67, 0x73, 0x08, 0x09,
      0xee, 0xb7, 0x70, 0x3f, 0x61, 0xb2, 0x19, 0x8e, 0x4e, 0xe5, 0x4b, 0x93, 0x8f, 0x5d, 0xdb, 0xa9,
      0xad, 0xf1, 0xae, 0x2e, 0xcb, 0x0d, 0xfc, 0xf4, 0x2d, 0x46, 0x6e, 0x1d, 0x97, 0xe8, 0xd1, 0xe9,
      0x4d, 0x37, 0xa5, 0x75, 0x5e, 0x83, 0x9e, 0xab, 0x82, 0x9d, 0xb9, 0x1c, 0xe0, 0xcd, 0x49, 0x89,
      0x01, 0xb6, 0xbd, 0x58, 0x24, 0xa2, 0x5f, 0x38, 0x78, 0x99, 0x15, 0x90, 0x50, 0xb8, 0x95, 0xe4,
      0xd0, 0x91, 0xc7, 0xce, 0xed, 0x0f, 0xb4, 0x6f, 0xa0, 0xcc, 0xf0, 0x02, 0x4a, 0x79, 0xc3, 0xde,
      0xa3, 0xef, 0xea, 0x51, 0xe6, 0x6b, 0x18, 0xec, 0x1b, 0x2c, 0x80, 0xf7, 0x74, 0xe7, 0xff, 0x21,
      0x5a, 0x6a, 0x54, 0x1e, 0x41, 0x31, 0x92, 0x35, 0xc4, 0x33, 0x07, 0x0a, 0xba, 0x7e, 0x0e, 0x34,
      0x88, 0xb1, 0x98, 0x7c, 0xf3, 0x3d, 0x60, 0x6c, 0x7b, 0xca, 0xd3, 0x1f, 0x32, 0x65, 0x04, 0x28,
      0x64, 0xbe, 0x85, 0x9b, 0x2f, 0x59, 0x8a, 0xd7, 0xb0, 0x25, 0xac, 0xaf, 0x12, 0x03, 0xe2, 0xf2]

D = [0x44D7, 0x26BC, 0x626B, 0x135E, 0x5789, 0x35E2, 0x7135, 0x09AF,
     0x4D78, 0x2F13, 0x6BC4, 0x1AF1, 0x5E26, 0x3C4D, 0x789A, 0x47AC]


def shift_left(num, shift, bit):  # 模2^31 - 1乘法
    return ((num << shift) & int('1' * bit, base=2)) + (num >> (bit - shift))


def add(a, b, bit):  # 模2^31-1加法
    return ((a + b) & int('1' * bit, base=2)) + ((a + b) >> bit)


def make_int32(a, b, c, d):
    return ((a << 24) & 0xffffffff) | ((b << 16) & 0xffffffff) | ((c << 8) & 0xffffffff) | d


def make_int31(a, b, c):
    return ((a << 23) & 0x7fffffff) | ((b << 8) & 0x7fffffff) | c


def LFSR_next():
    f = s[0]
    v = shift_left(s[0], 8, 31)
    f = add(f, v, 31)
    v = shift_left(s[4], 20, 31)
    f = add(f, v, 31)
    v = shift_left(s[10], 21, 31)
    f = add(f, v, 31)
    v = shift_left(s[13], 17, 31)
    f = add(f, v, 31)
    v = shift_left(s[15], 15, 31)
    f = add(f, v, 31)
    return f


def LFSR_init_mode(u):  # 31位输入u
    global s
    v = LFSR_next()
    temp = add(v, u, 31)
    if temp == 0:
        temp = 0x7fffffff
    s = s[1:] + [temp]


def LFSR_work_mode():
    global s
    v = LFSR_next()
    if v == 0:
        v = 0x7fffffff
    s = s[1:] + [v]


def BR():
    global X
    X[0] = ((s[15] & 0x7fff8000) << 1) | (s[14] & 0xffff)
    X[1] = ((s[11] & 0xffff) << 16) | (s[9] >> 15)
    X[2] = ((s[7] & 0xffff) << 16) | (s[5] >> 15)
    X[3] = ((s[2] & 0xffff) << 16) | (s[0] >> 15)


def L1(X):  # 32位输入X
    return X ^ shift_left(X, 2, 32) ^ shift_left(X, 10, 32) ^ shift_left(X, 18, 32) ^ shift_left(X, 24, 32)


def L2(X):
    return X ^ shift_left(X, 8, 32) ^ shift_left(X, 14, 32) ^ shift_left(X, 22, 32) ^ shift_left(X, 30, 32)


def F():
    global R
    W = ((X[0] ^ R[0]) + R[1]) & 0xffffffff
    W1 = (R[0] + X[1]) & 0xffffffff
    W2 = R[1] ^ X[2]
    u = L1(((W1 & 0xffff) << 16) | (W2 >> 16))
    v = L2(((W2 & 0xffff) << 16) | (W1 >> 16))
    R = [make_int32(S0[u >> 24], S1[(u >> 16) & 0xff],
                    S0[(u >> 8) & 0xff], S1[u & 0xff]),
         make_int32(S0[v >> 24], S1[(v >> 16) & 0xff],
                    S0[(v >> 8) & 0xff], S1[v & 0xff])]
    return W


def ZUC_init(key, IV):  # key, IV以16个整数数组传入
    global s, R
    s = [make_int31(key[i], D[i], IV[i]) for i in range(16)]
    R = [0, 0]
    for i in range(32):
        BR()
        W = F()
        LFSR_init_mode(W >> 1)


def get_Z():
    LFSR_work_mode()
    BR()
    return F() ^ X[-1]


def ZUC_generate_keystream(length):
    BR()
    F()
    key_stream = [get_Z() for _ in range(length)]
    LFSR_work_mode()
    return key_stream


def main():
    k = input().strip()[2:]
    key = [int(k[i:i + 2], base=16) for i in range(0, 32, 2)]
    iv = input().strip()[2:]
    IV = [int(iv[i:i + 2], base=16) for i in range(0, 32, 2)]
    length = int(input())
    ZUC_init(key, IV)
    key_stream = ZUC_generate_keystream(length)
    for i in key_stream:
        print('0x' + hex(i)[2:].zfill(8))


if __name__ == '__main__':
    main()
    # while True:
    #     main()
    #     print('-' * 32)