# import time


S_box = [[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
         [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
         [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
         [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
         [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
         [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
         [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
         [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
         [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
         [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
         [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
         [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
         [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
         [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
         [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
         [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]]


def byte_sub(state):
    return S_box[state // 16][state % 16]


def multiply(a, b):  # a,b 为整数
    poly = 0x11b
    ans = 0
    while b > 0:
        if b & 0x01 == 0x01:
            ans ^= a
        a <<= 1
        if a & 0x100 == 0x100:
            a ^= poly
        a &= 0xff
        b >>= 1
    return ans


def get_e_(cipher, cipher_, list_):
    _ = hex(cipher ^ cipher_)[2:].zfill(32)
    e_ = []
    for i in list_:
        e_.append(int(_[i * 2:(i + 1) * 2], base=16))
    return e_


def base_round(cipher, cipher_, round_):
    list_ = [0 + 4 * round_, (13 + 4 * round_) % 16, (10 + 4 * round_) % 16, (7 + 4 * round_) % 16]
    mul = [2, 1, 1, 3]
    e_ = get_e_(cipher, cipher_, list_)
    x_e_ = []  # [[e, x0, x1, x2, x3], []]这样表示
    for e in range(0x100):
        x_ = [[] for i in range(4)]
        for x in range(0x100):
            if byte_sub(x ^ multiply(mul[0], e)) == byte_sub(x) ^ e_[0]:
                x_[0].append(x)
            if byte_sub(x ^ multiply(mul[1], e)) == byte_sub(x) ^ e_[1]:
                x_[1].append(x)
            if byte_sub(x ^ multiply(mul[2], e)) == byte_sub(x) ^ e_[2]:
                x_[2].append(x)
            if byte_sub(x ^ multiply(mul[3], e)) == byte_sub(x) ^ e_[3]:
                x_[3].append(x)
        for x0 in x_[0]:
            for x1 in x_[1]:
                for x2 in x_[2]:
                    for x3 in x_[3]:
                        x_e_.append([e, x0, x1, x2, x3])
    K = []
    for i in range(len(x_e_)):  # 求出秘钥可能的值
        key = 0
        for j in range(1, 5):
            key ^= (byte_sub(x_e_[i][j]) ^ ((cipher >> 120 - 8 * list_[j - 1]) & 0xff)) << (120 - 8 * list_[j - 1])
        K.append(key)
    return K


def one_round(cipher, cipher_list, round_):
    key = base_round(cipher, cipher_list[0], round_)
    for cipher_ in cipher_list[1:]:
        _ = []
        K = base_round(cipher, cipher_, round_)
        for k in K:
            if k in key:
                _.append(k)
        key = _
        if len(key) == 1:
            break
    return key[0]


def get_key(k):
    w = [0] * 44
    Rcon = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
            0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000]
    for i in range(4):  # 初始化w[40~43]
        w[43 - i] = (k >> (32 * i)) & 0xffffffff
    for i in range(39, -1, -1):
        temp = w[i + 3]
        if i % 4 == 0:
            temp = ((temp << 8) & 0xffffffff) + (temp >> 24)
            temp = (byte_sub(temp >> 24) << 24) + (byte_sub((temp >> 16) & 0xff) << 16) \
                   + (byte_sub((temp >> 8) & 0xff) << 8) + byte_sub(temp & 0xff)
            temp ^= Rcon[i // 4]
        w[i] = w[i+4] ^ temp
    return (w[0] << 96) + (w[1] << 64) + (w[2] << 32) + w[3]


def AES_attack(cipher, cipher_list):
    key = 0
    for i in range(4):
        key ^= one_round(cipher, cipher_list[i], i)
    print('0x' + hex(get_key(key))[2:].zfill(32))


def main():
    plaintext = input().strip()
    cipher = int(input().strip(), base=16)
    cipher_list = [[0 for j in range(10)] for i in range(4)]
    for i in range(16):
        for j in range(10):
            if i < 4:
                cipher_list[i][j] = int(input().strip(), base=16)
    # start = time.time()
    AES_attack(cipher, cipher_list)
    # end = time.time()
    # print(end - start)


if __name__ == '__main__':
    main()


"""
优化思路：能否在求出准确的X0~3值后，再计算秘钥K10？准确的X值该如何求（X指X0-3的集合）
tips：第一次求出若干X，注意与e的取值无关，后面几次，在同一个e下，求出一个X'，与X作比较，
将与X0~3有交集的X'0~3放在某个集合中，多次后若只有一组X0~3，记得及时停止，输出结果
注：未实验，效果未知
最大的优化效果：将S盒定义为全局变量！！！
"""